{"version":3,"sources":["components/NavBar.js","components/CatCard.js","components/Wrapper.js","App.js","index.js"],"names":["Navbar","props","_jsxs","className","navbarState","children","_jsx","scoreState","highScore","currentScore","CatCard","_Fragment","concat","imageAnimation","onClick","imageClickHandler","id","src","process","image","alt","imageName","width","height","loading","Wrapper","imageState","map","index","App","setScoreState","useState","setImageState","setImageAnimation","setnavbarState","imageClickState","setImageClickState","useEffect","initImages","timeoutHandler","imageList","clicked","scoreIncrementer","newScore","func","updateVar","time","timer","setTimeout","clearTimeout","shuffle","array","randomIndex","currentIndex","length","Math","floor","random","console","log","clickedImageIndex","findIndex","newImageState","resetScoreState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22550eaf.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(props) {\n\t// console.log(props)\n\treturn (\n\t\t<nav className={props.navbarState}>\n\t\t\t<h1 className=\"title\">Cat Memorization Game</h1>\n\t\t\t{props.navbarState === \"initial\" && <p>Click each cat once!</p>}\n\t\t\t{props.navbarState === \"default\" && <p>Keep clicking cats you haven't clicked before!</p>}\n\t\t\t{props.navbarState === \"correct\" && <p>Correct!</p>}\n\t\t\t{props.navbarState === \"incorrect\" && <p>Incorrect, Sorry you lose!</p>}\n\t\t\t<div>\n\t\t\t\t<p>Hiscore: {props.scoreState.highScore}</p>\n\t\t\t\t{props.navbarState === \"correct\" ? <p>Current Score: {props.scoreState.currentScore - 1} + 1 = {props.scoreState.currentScore}</p> : <p>Current Score: {props.scoreState.currentScore}</p>}\n\t\t\t</div>\n\t\t</nav >\n\t);\n}\n\nexport default Navbar;","import React from \"react\";\n\nfunction CatCard(props) {\n\t// console.log(props)\n\treturn (\n\t\t<>\n\t\t\t<figure className={`${props.imageAnimation} cat-box`} onClick={() => props.imageClickHandler(props.id)} >\n\t\t\t\t{/* {props.clicked ? <p>ID: {props.id} clicked</p> : <p>ID: {props.id} not clicked</p>} */}\n\t\t\t\t<img src={process.env.PUBLIC_URL + props.image} alt={props.imageName} className=\"cat-image\" width=\"250\" height=\"250\" loading=\"lazy\" />\n\t\t\t\t<div className=\"cat-description\">\n\t\t\t\t\t<p className=\"click-text\">Choose this cat!</p>\n\t\t\t\t</div>\n\t\t\t</figure >\n\t\t</>\n\t);\n}\n\nexport default CatCard;\n","import React from \"react\";\nimport CatCard from \"./CatCard.js\"\n\nfunction Wrapper(props) {\n\t// console.log(props)\n\treturn (\n\t\t<section>\n\t\t\t<div className=\"cat-catalogue\">\n\t\t\t\t{props.imageState.map((image, index) => {\n\t\t\t\t\treturn (<CatCard\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t{...image}\n\t\t\t\t\t\timageAnimation={props.imageAnimation}\n\t\t\t\t\t\timageClickHandler={props.imageClickHandler}\n\t\t\t\t\t/>)\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</section>\n\n\t)\n}\nexport default Wrapper;\n","import { useState, useEffect } from \"react\";\nimport Navbar from \"./components/NavBar.js\"\nimport Wrapper from \"./components/Wrapper.js\"\n\nimport imageList from \"./components/images.json\";\n\nfunction App() {\n\tconst [scoreState, setScoreState] = useState({\n\t\tcurrentScore: 0,\n\t\thighScore: 0\n\t})\n\n\tconst [imageState, setImageState] = useState([])\n\n\tconst [imageAnimation, setImageAnimation] = useState(\"fade-in\")\n\n\tconst [navbarState, setnavbarState] = useState(\"initial\")\n\n\tconst [imageClickState, setImageClickState] = useState(false)\n\n\tuseEffect(() => {\n\t\tinitImages()\n\t}, [])\n\n\tuseEffect(() => {\n\t\ttimeoutHandler(setImageAnimation, \"fade-in\", 500)\n\t}, [imageAnimation])\n\n\tuseEffect(() => {\n\t\tif (navbarState === \"correct\" || navbarState === \"incorrect\") {\n\t\t\ttimeoutHandler(setnavbarState, \"default\", 2000)\n\t\t}\n\t}, [navbarState])\n\n\tconst initImages = () => {\n\t\tvar imageState = []\n\t\timageState = [...imageList].map((image, index) => ({\n\t\t\t...image,\n\t\t\tid: index,\n\t\t\timageName: \"The cat meows at midnight\",\n\t\t\tclicked: false\n\t\t}))\n\t\tsetImageState(imageState)\n\t}\n\n\tconst imageClickHandler = (id) => {\n\t\tif (imageClickState === false) {\n\n\t\t\tsetImageClickState(true)\n\t\t\tsetImageAnimation(\"fade-out\")\n\t\t\ttimeoutHandler(setImageClickState, false, 1500)\n\n\t\t\tvar clickedImageIndex = imageState.findIndex((image) => image.id === id)\n\n\t\t\tif (imageState[clickedImageIndex].clicked === false) {\n\t\t\t\tscoreIncrementer()\n\n\t\t\t\tsetnavbarState(\"correct\")\n\n\t\t\t\t// update clicked to true\n\t\t\t\tconst newImageState = imageState\n\t\t\t\tnewImageState[clickedImageIndex].clicked = true\n\t\t\t\tsetImageState(newImageState)\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst shuffledImageState = imageState\n\t\t\t\t\tsetImageState(shuffle(shuffledImageState))\n\t\t\t\t}, 500)\n\t\t\t}\n\t\t\t// u lose\n\t\t\telse {\n\t\t\t\t// keep highscore, reset currentScore\n\t\t\t\tconst resetScoreState = scoreState\n\t\t\t\tresetScoreState.currentScore = 0\n\t\t\t\tsetScoreState(resetScoreState)\n\n\t\t\t\tsetnavbarState(\"incorrect\")\n\n\t\t\t\tinitImages()\n\t\t\t}\n\t\t}\n\t}\n\n\tconst scoreIncrementer = () => {\n\t\tvar newScore = scoreState.currentScore + 1;\n\t\tif (newScore > scoreState.highScore) {\n\t\t\tsetScoreState({\n\t\t\t\tcurrentScore: newScore,\n\t\t\t\thighScore: newScore\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tsetScoreState({\n\t\t\t\t...scoreState,\n\t\t\t\tcurrentScore: newScore\n\t\t\t})\n\t\t}\n\t}\n\n\tconst timeoutHandler = (func, updateVar, time) => {\n\t\tconst timer = setTimeout(() => {\n\t\t\tfunc(updateVar)\n\t\t}, time);\n\t\t// prevent memory leaks\n\t\treturn () => {\n\t\t\tclearTimeout(timer);\n\t\t};\n\t}\n\n\tconst shuffle = (array) => {\n\t\tlet currentIndex = array.length\n\t\tlet randomIndex;\n\n\t\twhile (currentIndex > 0) {\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\tcurrentIndex--;\n\t\t\t[array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n\t\t\tconsole.log()\n\t\t}\n\t\treturn array;\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Navbar\n\t\t\t\tscoreState={scoreState}\n\t\t\t\tnavbarState={navbarState}\n\t\t\t/>\n\t\t\t<Wrapper\n\t\t\t\timageState={imageState}\n\t\t\t\timageAnimation={imageAnimation}\n\t\t\t\timageClickHandler={imageClickHandler}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}